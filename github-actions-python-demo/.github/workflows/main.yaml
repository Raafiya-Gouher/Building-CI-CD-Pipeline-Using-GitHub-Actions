# .github/workflows/main.yaml
# ------------------------------
# CI/CD Pipeline (Python Flask app without Docker)
# CI: Runs tests on every push or PR
# CD: Deploys to EC2 only if CI passes and after manual approval
# ------------------------------

name: Python CI/CD Pipeline (CI + CD with approval)

# Trigger on push to main or pull requests targeting main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# CI Job: Build and Test
jobs:
  build-test:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run unit tests
      - name: Run pytest
        run: pytest

# CD Job: Deploy (runs only if CI passes)
  deploy:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: build-test  # waits for CI job to pass

    # Manual approval via GitHub Environments
    environment:
      name: production  # create this environment in GitHub repo settings
      url: http://<EC2-PUBLIC-IP>:5000

    steps:
      # Step 1: Checkout repository (needed again)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to project folder
            cd /home/ubuntu/github-actions-python-demo || exit

            # Pull latest code
            git pull origin main

            # Stop running Flask app (if any)
            pkill -f "python app.py" || true

            # Install dependencies
            python3 -m pip install -r requirements.txt

            # Run Flask app in background
            nohup python3 app.py > app.log 2>&1 &
